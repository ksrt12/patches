From 645357178ffed252ea8ca15ff066e11914dda66d Mon Sep 17 00:00:00 2001
From: Kazakov Stepan <ksrt12group@gmail.com>
Date: Tue, 27 Nov 2018 01:34:27 +0300
Subject: [PATCH 1/9] try to fix gemini camera

Signed-off-by: Kazakov Stepan <ksrt12group@gmail.com>
---
 core/java/android/hardware/Camera.java        | 231 +++---------------
 .../camera2/CameraCharacteristics.java        |   7 -
 .../hardware/camera2/CameraDevice.java        |   4 -
 .../hardware/camera2/CameraManager.java       | 103 ++++----
 .../impl/CameraCaptureSessionImpl.java        |   3 +-
 .../camera2/impl/CameraDeviceImpl.java        |  44 +---
 .../hardware/camera2/utils/SurfaceUtils.java  |  27 --
 core/jni/android_hardware_Camera.cpp          |  16 +-
 8 files changed, 85 insertions(+), 350 deletions(-)

diff --git a/core/java/android/hardware/Camera.java b/core/java/android/hardware/Camera.java
index 20b5d1341e5a..be76dd1cd91a 100644
--- a/core/java/android/hardware/Camera.java
+++ b/core/java/android/hardware/Camera.java
@@ -28,9 +28,6 @@ import android.graphics.ImageFormat;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.SurfaceTexture;
-import android.hardware.camera2.CameraCharacteristics;
-import android.hardware.camera2.impl.CameraMetadataNative;
-import android.hardware.camera2.CaptureResult;
 import android.media.AudioAttributes;
 import android.media.IAudioService;
 import android.os.Handler;
@@ -50,7 +47,6 @@ import android.text.TextUtils;
 import android.util.Log;
 import android.view.Surface;
 import android.view.SurfaceHolder;
-import android.os.SystemProperties;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.app.IAppOpsCallback;
@@ -214,68 +210,6 @@ public class Camera {
     private CameraMetaDataCallback mCameraMetaDataCallback;
     /* ### QC ADD-ONS: END */
 
-    private static final int CAMERA_MSG_AEC = 0x10000;
-    private static final int CAMERA_MSG_DNG_IMAGE= 0x20000;
-    private static final int CAMERA_MSG_DNG_META_DATA = 0x40000;
-    private static final int CAMERA_MSG_IN_PROCESSING = 0x80000;
-    private static final int CAMERA_MSG_STATE_CALLBACK = 0x100000;
-    private static final int CAMERA_MSG_RAW_IMAGE_DUMMY = 0x120000;
-
-    private static CameraMetadataNative mMetadata;
-    private long mMetadataPtr; 
-    private CameraCharacteristics mCharacteristics;
-    private android.hardware.Camera.AECallback mAECallback;
-    private android.hardware.Camera.OneplusCallback mOneplusCallback;
-    private android.hardware.Camera.ProcessCallback mProcessCallback;
-    private boolean mIsOPService = false;
-    private android.hardware.Camera.PictureCallback mOPServiceJpegCallback = null;
-    private android.hardware.Camera.CameraStateCallback mCameraStateCallback;
-
-    public interface AECallback {
-        public abstract void onAeStateChanged(int[] p1);
-    }
-
-    public interface OneplusCallback {
-        public abstract void onDngImageReceived(byte[] p1, Camera p2);
-        public abstract void onDngMetadataReceived(CameraCharacteristics p1, CaptureResult p2, Camera p3);
-    }
-
-    public interface ProcessCallback {
-        public abstract void onProcessReceived();
-    }
-
-    public interface CameraStateCallback {
-        public abstract void onCameraStateChanged(byte[] p1);
-    }
-
-    public void setAECallback(AECallback cb) {
-        mAECallback = cb;
-    }
-    
-    public final void setOneplusCallback(OneplusCallback cb) {
-        mOneplusCallback = cb;
-    }
-    
-    public final void setProcessCallback(ProcessCallback cb) {
-        mProcessCallback = cb;
-    }
-    
-    public void setOPJpegCallback(PictureCallback cb) {
-        mOPServiceJpegCallback = cb;
-    }
-    
-    public final void addDngImageCallbackBuffer(byte[] cb) {
-        addRawImageCallbackBuffer(cb);
-    }
-
-    public final void setCameraStateCallback(CameraStateCallback cb) {
-        mCameraStateCallback = cb;
-    }
-    
-    public static Camera openOPService() {
-        return new Camera(0, -0x64);
-    }
-
     /**
      * Broadcast Action:  A new picture is taken by the camera, and the entry of
      * the picture has been added to the media store.
@@ -356,51 +290,46 @@ public class Camera {
      *   cameras or an error was encountered enumerating them.
      */
     public static int getNumberOfCameras() {
+        boolean exposeAuxCamera = true;
+        String packageName = ActivityThread.currentOpPackageName();
         /* Force to expose only two cameras
          * if the package name does not falls in this bucket
          */
-        int numberOfCameras = native_getNumberOfCameras();
-        if ((numberOfCameras > 2) && !shouldExposeAuxCamera()) {
-            numberOfCameras = 2;
-        }
-        return numberOfCameras;
-    }
-
-    /**
-     * Wether to expose Aux cameras
-     */
-    /** @hide */
-    public static boolean shouldExposeAuxCamera() {
-        String packageName = ActivityThread.currentOpPackageName();
-        // This should be .packagewhitelist but we shouldn't change qualcomm's default
         String packageList = SystemProperties.get("vendor.camera.aux.packagelist");
         String packageBlacklist = SystemProperties.get("vendor.camera.aux.packageblacklist");
         if (packageList.length() > 0) {
             TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
             splitter.setString(packageList);
+            exposeAuxCamera = false;
             for (String str : splitter) {
                 if (packageName.equals(str)) {
-                    return true;
+                    exposeAuxCamera = true;
+                    break;
                 }
             }
-            return false;
         } else if (packageBlacklist.length() > 0) {
             TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
             splitter.setString(packageBlacklist);
+            exposeAuxCamera = true;
             for (String str : splitter) {
                 if (packageName.equals(str)) {
-                    return false;
+                    exposeAuxCamera = false;
+                    break;
                 }
             }
         }
-        return true;
+        int numberOfCameras = _getNumberOfCameras();
+        if (exposeAuxCamera == false && (numberOfCameras > 2)) {
+            numberOfCameras = 2;
+        }
+        return numberOfCameras;
     }
 
     /**
      * Returns the number of physical cameras available on this device.
      */
     /** @hide */
-    public native static int native_getNumberOfCameras();
+    public native static int _getNumberOfCameras();
 
     /**
      * Returns the information about a particular camera.
@@ -411,7 +340,7 @@ public class Camera {
      *    low-level failure).
      */
     public static void getCameraInfo(int cameraId, CameraInfo cameraInfo) {
-        if (cameraId >= getNumberOfCameras()) {
+        if(cameraId >= getNumberOfCameras()){
             throw new RuntimeException("Unknown camera ID");
         }
         try {
@@ -651,8 +580,6 @@ public class Camera {
         mCameraDataCallback = null;
         mCameraMetaDataCallback = null;
         /* ### QC ADD-ONS: END */
-        mOneplusCallback = null;
-        mProcessCallback = null;
 
         Looper looper;
         if ((looper = Looper.myLooper()) != null) {
@@ -663,21 +590,6 @@ public class Camera {
             mEventHandler = null;
         }
 
-        String packageName = ActivityThread.currentOpPackageName();
-
-        //Force HAL1 if the package name falls in this bucket
-        String packageList = SystemProperties.get("camera.hal1.packagelist", "");
-        if (packageList.length() > 0) {
-            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-            splitter.setString(packageList);
-            for (String str : splitter) {
-                if (packageName.equals(str)) {
-                    halVersion = CAMERA_HAL_API_VERSION_1_0;
-                    break;
-                }
-            }
-	    }
-
         return native_setup(new WeakReference<Camera>(this), cameraId, halVersion,
                 ActivityThread.currentOpPackageName());
     }
@@ -706,8 +618,8 @@ public class Camera {
 
     /** used by Camera#open, Camera#open(int) */
     Camera(int cameraId) {
-        if (cameraId >= getNumberOfCameras()) {
-            throw new RuntimeException("Unknown camera ID");
+        if(cameraId >= getNumberOfCameras()){
+             throw new RuntimeException("Unknown camera ID");
         }
         int err = cameraInitNormal(cameraId);
         if (checkInitErrors(err)) {
@@ -743,22 +655,6 @@ public class Camera {
     Camera() {}
 
     private void initAppOps() {
-        boolean isAppAllowed = false;
-        String packageName = ActivityThread.currentOpPackageName();
-        String packageList = SystemProperties.get("camera.shutter_sound.blacklist", "");
-        if (packageList.length() > 0) {
-            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-            splitter.setString(packageList);
-            for (String str : splitter) {
-                if (packageName.equals(str)) {
-                    isAppAllowed = true;
-                    break;
-                }
-            }
-        }
-        if (isAppAllowed){
-            return;
-        }
         IBinder b = ServiceManager.getService(Context.APP_OPS_SERVICE);
         mAppOps = IAppOpsService.Stub.asInterface(b);
         // initialize mHasAppOpsPlayAudio
@@ -1010,7 +906,6 @@ public class Camera {
         mRawImageCallback = null;
         mPostviewCallback = null;
         mJpegCallback = null;
-        mProcessCallback = null;
         synchronized (mAutoFocusCallbackLock) {
             mAutoFocusCallback = null;
         }
@@ -1360,13 +1255,7 @@ public class Camera {
 
         @Override
         public void handleMessage(Message msg) {
-            int msgID = msg.what;
-
-            if (mOneplusCallback != null && msgID == CAMERA_MSG_RAW_IMAGE) {
-                msgID = CAMERA_MSG_DNG_IMAGE;
-            }
-
-            switch(msgID) {
+            switch(msg.what) {
             case CAMERA_MSG_SHUTTER:
                 if (mShutterCallback != null) {
                     mShutterCallback.onShutter();
@@ -1382,9 +1271,6 @@ public class Camera {
             case CAMERA_MSG_COMPRESSED_IMAGE:
                 if (mJpegCallback != null) {
                     mJpegCallback.onPictureTaken((byte[])msg.obj, mCamera);
-                } else if (mIsOPService && mOPServiceJpegCallback != null) {
-                    Log.d(TAG,"op jpeg callback");
-                    mOPServiceJpegCallback.onPictureTaken((byte[])msg.obj, mCamera);
                 }
                 return;
 
@@ -1470,51 +1356,6 @@ public class Camera {
                 }
                 return;
             /* ### QC ADD-ONS: END */
-
-            case CAMERA_MSG_RAW_IMAGE_DUMMY:
-                Log.d(TAG,"CAMERA_MSG_RAW_IMAGE_DUMMY");
-                return;
-
-            case CAMERA_MSG_AEC:
-                Log.d(TAG,"CAMERA_MSG_AEC");
-                if (mAECallback != null) {
-                    int [] states=new int[2];
-                    states[0]=msg.arg1;
-                    states[1]=msg.arg2;
-                    mAECallback.onAeStateChanged(states);
-                }
-                return;
-                
-            case CAMERA_MSG_DNG_IMAGE:
-                Log.d(TAG,"CAMERA_MSG_DNG_IMAGE");
-                if (mOneplusCallback != null) {
-                    mOneplusCallback.onDngImageReceived((byte[])msg.obj, mCamera);
-                }
-                return;
-                
-            case CAMERA_MSG_DNG_META_DATA:
-                Log.d(TAG,"CAMERA_MSG_DNG_META_DATA");
-                if (mOneplusCallback != null && mMetadata!=null) {
-                    mCharacteristics = new CameraCharacteristics(new CameraMetadataNative(mMetadata));
-                    CaptureResult result=new CaptureResult(new CameraMetadataNative(mMetadata),-1);
-                    mOneplusCallback.onDngMetadataReceived(mCharacteristics, result, mCamera);
-                }    
-            return;
-            
-            case CAMERA_MSG_IN_PROCESSING:
-                Log.d(TAG,"CAMERA_MSG_IN_PROCESSING");
-                if (mProcessCallback != null) {
-                    mProcessCallback.onProcessReceived();
-                }
-                return;
-
-            case CAMERA_MSG_STATE_CALLBACK:
-                Log.d(TAG,"CAMERA_MSG_STATE_CALLBACK");
-                if (mCameraStateCallback != null) {
-		    mCameraStateCallback.onCameraStateChanged((byte[])msg.obj);
-		}
-                return;
-
             default:
                 Log.e(TAG, "Unknown message type " + msg.what);
                 return;
@@ -1797,33 +1638,15 @@ public class Camera {
         if (mShutterCallback != null) {
             msgType |= CAMERA_MSG_SHUTTER;
         }
+        if (mRawImageCallback != null) {
+            msgType |= CAMERA_MSG_RAW_IMAGE;
+        }
         if (mPostviewCallback != null) {
             msgType |= CAMERA_MSG_POSTVIEW_FRAME;
         }
         if (mJpegCallback != null) {
             msgType |= CAMERA_MSG_COMPRESSED_IMAGE;
         }
-        //oneplus camera mod
-        if (mOneplusCallback != null) {
-            msgType |= CAMERA_MSG_DNG_META_DATA;
-            msgType |= CAMERA_MSG_DNG_IMAGE;
-            mMetadata = new CameraMetadataNative();
-
-            try {
-                java.lang.reflect.Field ptrField = CameraMetadataNative.class.  
-                getDeclaredField("mMetadataPtr");  
-                ptrField.setAccessible(true);
-                mMetadataPtr = (long) ptrField.get(mMetadata);
-            } catch (Exception e) {
-                    Log.e(TAG, "Error oneplus callback in takePicture ", e);
-            };
-        } else if (mRawImageCallback != null) {
-            msgType |= CAMERA_MSG_RAW_IMAGE;
-        }
-
-        if (mProcessCallback != null) {
-            msgType |= CAMERA_MSG_IN_PROCESSING;
-        }
 
         native_takePicture(msgType);
         mFaceDetectionRunning = false;
@@ -2044,7 +1867,11 @@ public class Camera {
                     } catch (RemoteException e) {
                         Log.e(TAG, "Audio service is unavailable for queries");
                     }
-                    _enableShutterSound(false);
+                    try {
+                        _enableShutterSound(false);
+                    } catch (Exception e) {
+                        Log.e(TAG, "Couldn't disable shutter sound");
+                    }
                 } else {
                     enableShutterSound(mShutterSoundEnabledFromApp);
                 }
@@ -4119,7 +3946,6 @@ public class Camera {
          * @see #getSceneMode()
          */
         public void setSceneMode(String value) {
-            if(getSupportedSceneModes() == null) return;
             set(KEY_SCENE_MODE, value);
         }
 
@@ -4157,7 +3983,6 @@ public class Camera {
          * @see #getFlashMode()
          */
         public void setFlashMode(String value) {
-	    if(getSupportedFlashModes() == null) return;
             set(KEY_FLASH_MODE, value);
         }
 
@@ -4913,7 +4738,7 @@ public class Camera {
         // Example string: "(10000,26623),(10000,30000)". Return null if the
         // passing string is null or the size is 0.
         private ArrayList<int[]> splitRange(String str) {
-            if (str == null || str.charAt(0) != '('
+            if (str == null || str.isEmpty() || str.charAt(0) != '('
                     || str.charAt(str.length() - 1) != ')') {
                 Log.e(TAG, "Invalid range list string=" + str);
                 return null;
@@ -4938,7 +4763,7 @@ public class Camera {
         // Example string: "(-10,-10,0,0,300),(0,0,10,10,700)". Return null if
         // the passing string is null or the size is 0 or (0,0,0,0,0).
         private ArrayList<Area> splitArea(String str) {
-            if (str == null || str.charAt(0) != '('
+            if (str == null || str.isEmpty() || str.charAt(0) != '('
                     || str.charAt(str.length() - 1) != ')') {
                 Log.e(TAG, "Invalid area string=" + str);
                 return null;
diff --git a/core/java/android/hardware/camera2/CameraCharacteristics.java b/core/java/android/hardware/camera2/CameraCharacteristics.java
index 2b195fc5ad83..e33060bb9250 100644
--- a/core/java/android/hardware/camera2/CameraCharacteristics.java
+++ b/core/java/android/hardware/camera2/CameraCharacteristics.java
@@ -31,7 +31,6 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import android.app.ActivityThread;
 
 /**
  * <p>The properties describing a
@@ -221,12 +220,6 @@ public final class CameraCharacteristics extends CameraMetadata<CameraCharacteri
      */
     @Nullable
     public <T> T get(Key<T> key) {
-        if(key == INFO_SUPPORTED_HARDWARE_LEVEL){
-            String packageName = ActivityThread.currentOpPackageName();
-            if(packageName.equals("com.oneplus.camera")){
-                return (T)new Integer(0x2);
-            }
-        }
         return mProperties.get(key);
     }
 
diff --git a/core/java/android/hardware/camera2/CameraDevice.java b/core/java/android/hardware/camera2/CameraDevice.java
index 715267a6f0de..ce88697fa8db 100644
--- a/core/java/android/hardware/camera2/CameraDevice.java
+++ b/core/java/android/hardware/camera2/CameraDevice.java
@@ -455,10 +455,6 @@ public abstract class CameraDevice implements AutoCloseable {
             @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler)
             throws CameraAccessException;
 
-    /** @hide */
-    public abstract void setVendorStreamConfigMode(int index)
-            throws CameraAccessException;
-
     /**
      * <p>Create a new camera capture session by providing the target output set of Surfaces and
      * its corresponding surface configuration to the camera device.</p>
diff --git a/core/java/android/hardware/camera2/CameraManager.java b/core/java/android/hardware/camera2/CameraManager.java
index 3ef2642cb4f5..87058848360b 100644
--- a/core/java/android/hardware/camera2/CameraManager.java
+++ b/core/java/android/hardware/camera2/CameraManager.java
@@ -23,7 +23,6 @@ import android.annotation.RequiresPermission;
 import android.annotation.SystemService;
 import android.app.ActivityThread;
 import android.content.Context;
-import android.hardware.Camera;
 import android.hardware.CameraInfo;
 import android.hardware.CameraStatus;
 import android.hardware.ICameraService;
@@ -913,9 +912,34 @@ public final class CameraManager {
                 // Try to make sure we have an up-to-date list of camera devices.
                 connectCameraServiceLocked();
 
+                boolean exposeAuxCamera = true;
+                String packageName = ActivityThread.currentOpPackageName();
+                String packageList = SystemProperties.get("vendor.camera.aux.packagelist");
+                String packageBlacklist = SystemProperties.get("vendor.camera.aux.packageblacklist");
+                if (packageList.length() > 0) {
+                    TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
+                    splitter.setString(packageList);
+                    exposeAuxCamera = false;
+                    for (String str : splitter) {
+                        if (packageName.equals(str)) {
+                            exposeAuxCamera = true;
+                            break;
+                        }
+                    }
+                } else if (packageBlacklist.length() > 0) {
+                    TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
+                    splitter.setString(packageBlacklist);
+                    exposeAuxCamera = true;
+                    for (String str : splitter) {
+                        if (packageName.equals(str)) {
+                            exposeAuxCamera = false;
+                            break;
+                        }
+                    }
+                }
                 int idCount = 0;
                 for (int i = 0; i < mDeviceStatus.size(); i++) {
-                    if ((i == 2) && !Camera.shouldExposeAuxCamera()) break;
+                    if(!exposeAuxCamera && (i == 2)) break;
                     int status = mDeviceStatus.valueAt(i);
                     if (status == ICameraServiceListener.STATUS_NOT_PRESENT ||
                             status == ICameraServiceListener.STATUS_ENUMERATING) continue;
@@ -924,7 +948,7 @@ public final class CameraManager {
                 cameraIds = new String[idCount];
                 idCount = 0;
                 for (int i = 0; i < mDeviceStatus.size(); i++) {
-                    if ((i == 2) && !Camera.shouldExposeAuxCamera()) break;
+                    if(!exposeAuxCamera && (i == 2)) break;
                     int status = mDeviceStatus.valueAt(i);
                     if (status == ICameraServiceListener.STATUS_NOT_PRESENT ||
                             status == ICameraServiceListener.STATUS_ENUMERATING) continue;
@@ -973,26 +997,6 @@ public final class CameraManager {
                     throw new IllegalArgumentException("cameraId was null");
                 }
 
-                /* Force to expose only two cameras
-                 * if the package name does not falls in this bucket
-                 */
-                boolean exposeAuxCamera = false;
-                String packageName = ActivityThread.currentOpPackageName();
-                String packageList = SystemProperties.get("vendor.camera.aux.packagelist");
-                if (packageList.length() > 0) {
-                    TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-                    splitter.setString(packageList);
-                    for (String str : splitter) {
-                        if (packageName.equals(str)) {
-                            exposeAuxCamera = true;
-                            break;
-                        }
-                    }
-                }
-                if (exposeAuxCamera == false && (Integer.parseInt(cameraId) >= 2)) {
-                    throw new IllegalArgumentException("invalid cameraId");
-                }
-
                 ICameraService cameraService = getCameraService();
                 if (cameraService == null) {
                     throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED,
@@ -1129,7 +1133,33 @@ public final class CameraManager {
             /* Force to ignore the last mono/aux camera status update
              * if the package name does not falls in this bucket
              */
-            if (!Camera.shouldExposeAuxCamera()) {
+            boolean exposeMonoCamera = true;
+            String packageName = ActivityThread.currentOpPackageName();
+            String packageList = SystemProperties.get("vendor.camera.aux.packagelist");
+            String packageBlacklist = SystemProperties.get("vendor.camera.aux.packageblacklist");
+            if (packageList.length() > 0) {
+                TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
+                splitter.setString(packageList);
+                exposeMonoCamera = false;
+                for (String str : splitter) {
+                    if (packageName.equals(str)) {
+                        exposeMonoCamera = true;
+                        break;
+                    }
+                }
+            } else if (packageBlacklist.length() > 0) {
+                TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
+                splitter.setString(packageBlacklist);
+                exposeMonoCamera = true;
+                for (String str : splitter) {
+                    if (packageName.equals(str)) {
+                        exposeMonoCamera = false;
+                        break;
+                    }
+                }
+            }
+
+            if (exposeMonoCamera == false) {
                 if (Integer.parseInt(id) >= 2) {
                     Log.w(TAG, "[soar.cts] ignore the status update of camera: " + id);
                     return;
@@ -1211,31 +1241,6 @@ public final class CameraManager {
                         String.format("Camera id %s has torch status changed to 0x%x", id, status));
             }
 
-            /* Force to ignore the aux or composite camera torch status update
-             * if the package name does not falls in this bucket
-             */
-            boolean exposeMonoCamera = false;
-            String packageName = ActivityThread.currentOpPackageName();
-            String packageList = SystemProperties.get("vendor.camera.aux.packagelist");
-            if (packageList.length() > 0) {
-                TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-                splitter.setString(packageList);
-                for (String str : splitter) {
-                    if (packageName.equals(str)) {
-                        exposeMonoCamera = true;
-                        break;
-                    }
-                }
-            }
-
-            if (exposeMonoCamera == false) {
-                if (Integer.parseInt(id) >= 2) {
-                    Log.w(TAG, "ignore the torch status update of camera: " + id);
-                    return;
-                }
-            }
-
-
             if (!validTorchStatus(status)) {
                 Log.e(TAG, String.format("Ignoring invalid device %s torch status 0x%x", id,
                                 status));
diff --git a/core/java/android/hardware/camera2/impl/CameraCaptureSessionImpl.java b/core/java/android/hardware/camera2/impl/CameraCaptureSessionImpl.java
index eee5f7febdf2..a4640c1fa519 100644
--- a/core/java/android/hardware/camera2/impl/CameraCaptureSessionImpl.java
+++ b/core/java/android/hardware/camera2/impl/CameraCaptureSessionImpl.java
@@ -206,8 +206,7 @@ public class CameraCaptureSessionImpl extends CameraCaptureSession
         } else if (request.isReprocess() && !isReprocessable()) {
             throw new IllegalArgumentException("this capture session cannot handle reprocess " +
                     "requests");
-        } else if (!mDeviceImpl.isPrivilegedApp() &&
-                request.isReprocess() && request.getReprocessableSessionId() != mId) {
+        } else if (request.isReprocess() && request.getReprocessableSessionId() != mId) {
             throw new IllegalArgumentException("capture request was created for another session");
         }
     }
diff --git a/core/java/android/hardware/camera2/impl/CameraDeviceImpl.java b/core/java/android/hardware/camera2/impl/CameraDeviceImpl.java
index 87ccc221f635..d967fbaf610c 100644
--- a/core/java/android/hardware/camera2/impl/CameraDeviceImpl.java
+++ b/core/java/android/hardware/camera2/impl/CameraDeviceImpl.java
@@ -16,13 +16,10 @@
 
 package android.hardware.camera2.impl;
 
-import static android.hardware.camera2.CameraAccessException.CAMERA_IN_USE;
 import static com.android.internal.util.function.pooled.PooledLambda.obtainRunnable;
 
 import android.annotation.NonNull;
 import android.hardware.ICameraService;
-import android.app.ActivityThread;
-import android.graphics.ImageFormat;
 import android.hardware.camera2.CameraAccessException;
 import android.hardware.camera2.CameraCaptureSession;
 import android.hardware.camera2.CameraCharacteristics;
@@ -46,8 +43,6 @@ import android.os.IBinder;
 import android.os.Looper;
 import android.os.RemoteException;
 import android.os.ServiceSpecificException;
-import android.os.SystemProperties;
-import android.text.TextUtils;
 import android.util.Log;
 import android.util.Range;
 import android.util.Size;
@@ -79,7 +74,7 @@ public class CameraDeviceImpl extends CameraDevice
     private final boolean DEBUG = false;
 
     private static final int REQUEST_ID_NONE = -1;
-    private int customOpMode = 0;
+
     // TODO: guard every function with if (!mRemoteDevice) check (if it was closed)
     private ICameraDeviceUserWrapper mRemoteDevice;
 
@@ -129,7 +124,6 @@ public class CameraDeviceImpl extends CameraDevice
     private int mNextSessionId = 0;
 
     private final int mAppTargetSdkVersion;
-    private boolean mIsPrivilegedApp = false;
 
     // Runnables for all state transitions, except error, which needs the
     // error code argument
@@ -272,7 +266,6 @@ public class CameraDeviceImpl extends CameraDevice
         } else {
             mTotalPartialCount = partialCount;
         }
-        mIsPrivilegedApp = checkPrivilegedAppList();
     }
 
     public CameraDeviceCallbacks getCallbacks() {
@@ -361,10 +354,6 @@ public class CameraDeviceImpl extends CameraDevice
         }
     }
 
-    public void setVendorStreamConfigMode(int fpsrange) {
-        customOpMode = fpsrange;
-    }
-
     @Override
     public String getId() {
         return mCameraId;
@@ -478,7 +467,6 @@ public class CameraDeviceImpl extends CameraDevice
                         mConfiguredOutputs.put(streamId, outConfig);
                     }
                 }
-                operatingMode = (operatingMode | (customOpMode << 16));
 
                 if (sessionParams != null) {
                     mRemoteDevice.endConfigure(operatingMode, sessionParams.getNativeCopy());
@@ -1202,41 +1190,11 @@ public class CameraDeviceImpl extends CameraDevice
         }
     }
 
-    private boolean checkPrivilegedAppList() {
-        String packageName = ActivityThread.currentOpPackageName();
-        String packageList = SystemProperties.get("persist.vendor.camera.privapp.list");
-
-        if (packageList.length() > 0) {
-            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-            splitter.setString(packageList);
-            for (String str : splitter) {
-                if (packageName.equals(str)) {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-
-    public boolean isPrivilegedApp() {
-        return mIsPrivilegedApp;
-    }
-
     private void checkInputConfiguration(InputConfiguration inputConfig) {
         if (inputConfig != null) {
             StreamConfigurationMap configMap = mCharacteristics.get(
                     CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
 
-            /*
-             * don't check input format and size,
-             * if the package name is in the white list
-             */
-            if (isPrivilegedApp()) {
-                Log.w(TAG, "ignore input format/size check for white listed app");
-                return;
-            }
-
             int[] inputFormats = configMap.getInputFormats();
             boolean validFormat = false;
             for (int format : inputFormats) {
diff --git a/core/java/android/hardware/camera2/utils/SurfaceUtils.java b/core/java/android/hardware/camera2/utils/SurfaceUtils.java
index c90214caf27d..92478441aea3 100644
--- a/core/java/android/hardware/camera2/utils/SurfaceUtils.java
+++ b/core/java/android/hardware/camera2/utils/SurfaceUtils.java
@@ -29,11 +29,6 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 
-import android.app.ActivityThread;
-import android.os.SystemProperties;
-import android.text.TextUtils;
-
-
 /**
  * Various Surface utilities.
  */
@@ -160,13 +155,7 @@ public class SurfaceUtils {
                     + " the size must be 1 or 2");
         }
 
-        if (isPrivilegedApp()) {
-            //skip checks for privileged apps
-            return;
-        }
-
         List<Size> highSpeedSizes = null;
-
         if (fpsRange == null) {
             highSpeedSizes = Arrays.asList(config.getHighSpeedVideoSizes());
         } else {
@@ -218,20 +207,4 @@ public class SurfaceUtils {
         }
     }
 
-    private static boolean isPrivilegedApp() {
-        String packageName = ActivityThread.currentOpPackageName();
-        String packageList = SystemProperties.get("persist.camera.privapp.list");
-
-        if (packageList.length() > 0) {
-            TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(',');
-            splitter.setString(packageList);
-            for (String str : splitter) {
-                if (packageName.equals(str)) {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
 }
diff --git a/core/jni/android_hardware_Camera.cpp b/core/jni/android_hardware_Camera.cpp
index e107fe429c44..909686d68dd5 100644
--- a/core/jni/android_hardware_Camera.cpp
+++ b/core/jni/android_hardware_Camera.cpp
@@ -43,7 +43,6 @@ enum {
 
 struct fields_t {
     jfieldID    context;
-    jfieldID    metadata_ptr;
     jfieldID    facing;
     jfieldID    orientation;
     jfieldID    canDisableShutterSound;
@@ -79,7 +78,6 @@ struct fields_t {
 
 static fields_t fields;
 static Mutex sLock;
-static CameraMetadata* mMeta_ptr;
 
 // provides persistent context for calls from native code to Java
 class JNICameraContext: public CameraListener
@@ -299,10 +297,6 @@ void JNICameraContext::copyAndPost(JNIEnv* env, const sp<IMemory>& dataPtr, int
                         return;
                     }
                 }
-            } else if (msgType == 0x40000) {
-                camera_metadata_t * cMetaData = reinterpret_cast<camera_metadata_t*>(heapBase + offset);
-                *mMeta_ptr = (const camera_metadata_t*)cMetaData;
-                mMeta_ptr->sort();
             } else {
                 ALOGV("Allocating callback buffer");
                 obj = env->NewByteArray(size);
@@ -510,7 +504,6 @@ void JNICameraContext::setCallbackMode(JNIEnv *env, bool installed, bool manualM
 static void android_hardware_Camera_setLongshot(JNIEnv *env, jobject thiz, jboolean enable)
 {
     ALOGV("setLongshot");
-#ifdef QCOM_HARDWARE
     JNICameraContext* context;
     status_t rc;
     sp<Camera> camera = get_native_camera(env, thiz, &context);
@@ -525,7 +518,6 @@ static void android_hardware_Camera_setLongshot(JNIEnv *env, jobject thiz, jbool
     if (rc != NO_ERROR) {
        jniThrowException(env, "java/lang/RuntimeException", "enabling longshot mode failed");
     }
-#endif
 }
 
 static void android_hardware_Camera_stopLongshot(JNIEnv *env, jobject thiz)
@@ -546,7 +538,6 @@ static void android_hardware_Camera_stopLongshot(JNIEnv *env, jobject thiz)
 static void android_hardware_Camera_sendHistogramData(JNIEnv *env, jobject thiz)
  {
    ALOGV("sendHistogramData" );
-#ifdef QCOM_HARDWARE
    JNICameraContext* context;
    status_t rc;
    sp<Camera> camera = get_native_camera(env, thiz, &context);
@@ -557,12 +548,10 @@ static void android_hardware_Camera_sendHistogramData(JNIEnv *env, jobject thiz)
    if (rc != NO_ERROR) {
       jniThrowException(env, "java/lang/RuntimeException", "send histogram data failed");
     }
-#endif
  }
  static void android_hardware_Camera_setHistogramMode(JNIEnv *env, jobject thiz, jboolean mode)
  {
    ALOGV("setHistogramMode: mode:%d", (int)mode);
-#ifdef QCOM_HARDWARE
    JNICameraContext* context;
    status_t rc;
    sp<Camera> camera = get_native_camera(env, thiz, &context);
@@ -576,7 +565,6 @@ static void android_hardware_Camera_sendHistogramData(JNIEnv *env, jobject thiz)
    if (rc != NO_ERROR) {
       jniThrowException(env, "java/lang/RuntimeException", "set histogram mode failed");
      }
-#endif
  }
 void JNICameraContext::addCallbackBuffer(
         JNIEnv *env, jbyteArray cbb, int msgType)
@@ -959,7 +947,6 @@ static void android_hardware_Camera_takePicture(JNIEnv *env, jobject thiz, jint
     JNICameraContext* context;
     sp<Camera> camera = get_native_camera(env, thiz, &context);
     if (camera == 0) return;
-    mMeta_ptr = reinterpret_cast<android::CameraMetadata*>(env->GetLongField(thiz,fields.metadata_ptr));
 
     /*
      * When CAMERA_MSG_RAW_IMAGE is requested, if the raw image callback
@@ -1165,7 +1152,7 @@ static void android_hardware_Camera_sendVendorCommand(JNIEnv *env, jobject thiz,
 //-------------------------------------------------
 
 static const JNINativeMethod camMethods[] = {
-  { "native_getNumberOfCameras",
+  { "_getNumberOfCameras",
     "()I",
     (void *)android_hardware_Camera_getNumberOfCameras },
   { "_getCameraInfo",
@@ -1288,7 +1275,6 @@ int register_android_hardware_Camera(JNIEnv *env)
 {
     field fields_to_find[] = {
         { "android/hardware/Camera", "mNativeContext",   "J", &fields.context },
-        { "android/hardware/Camera", "mMetadataPtr",   "J", &fields.metadata_ptr },
         { "android/hardware/Camera$CameraInfo", "facing",   "I", &fields.facing },
         { "android/hardware/Camera$CameraInfo", "orientation",   "I", &fields.orientation },
         { "android/hardware/Camera$CameraInfo", "canDisableShutterSound",   "Z",
-- 
2.20.1

